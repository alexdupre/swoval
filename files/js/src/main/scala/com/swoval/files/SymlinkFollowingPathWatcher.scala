// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.functional.Filters.AllPass
import com.swoval.files.FileTreeViews.Observer
import com.swoval.files.PathWatchers.Event
import com.swoval.files.PathWatchers.Event.Kind
import com.swoval.functional.Either
import com.swoval.functional.Filter
import com.swoval.runtime.Platform
import java.io.IOException
import java.nio.file.Path
import java.util.Iterator

class SymlinkFollowingPathWatcher(private val pathWatcher: PathWatcher[PathWatchers.Event],
                                  directoryRegistry: DirectoryRegistry)
    extends PathWatcher[PathWatchers.Event] {

  private val symlinkWatcher: SymlinkWatcher = new SymlinkWatcher(
    if (Platform.isMac) new ApplePathWatcher(new DirectoryRegistryImpl())
    else PlatformWatcher.make(false, new DirectoryRegistryImpl()))

  private val observers: Observers[PathWatchers.Event] = new Observers()

  private val pathWatcherDirectoryRegistry: DirectoryRegistry =
    directoryRegistry

  pathWatcher.addObserver(new Observer[Event]() {
    override def onError(t: Throwable): Unit = {
      observers.onError(t)
    }

    override def onNext(event: Event): Unit = {
      if (event.exists() && event.isSymbolicLink) {
        try {
          val maxDepth: Int = directoryRegistry.maxDepthFor(event.getPath)
          symlinkWatcher.addSymlink(event.getPath, maxDepth)
          if (event.isDirectory) {
            handleNewDirectory(event.getPath, maxDepth, true)
          }
        } catch {
          case e: IOException => observers.onError(e)

        }
      } else if (!event.exists()) {
        symlinkWatcher.remove(event.getPath)
      }
      observers.onNext(event)
    }
  })

  symlinkWatcher.addObserver(new Observer[Event]() {
    override def onError(t: Throwable): Unit = {
      observers.onError(t)
    }

    override def onNext(event: Event): Unit = {
      observers.onNext(event)
    }
  })

  private def handleNewDirectory(path: Path, maxDepth: Int, trigger: Boolean): Unit = {
    val it: Iterator[TypedPath] =
      FileTreeViews.list(path, maxDepth, AllPass).iterator()
    while (it.hasNext) {
      val tp: TypedPath = it.next()
      if (tp.isSymbolicLink) {
        val p: Path = tp.getPath
        symlinkWatcher.addSymlink(p, pathWatcherDirectoryRegistry.maxDepthFor(p))
      }
      if (trigger) {
        observers.onNext(new Event(tp, Kind.Create))
      }
    }
  }

  override def register(path: Path, maxDepth: Int): Either[IOException, Boolean] = {
    val pathWatcherResult: Either[IOException, Boolean] =
      pathWatcher.register(path, maxDepth)
    var listResult: Either[IOException, Boolean] = pathWatcherResult
    if (pathWatcherResult.isRight) {
      try {
        handleNewDirectory(path, maxDepth, false)
        listResult = Either.right(true)
      } catch {
        case e: IOException => listResult = Either.left(e)

      }
    }
    listResult
  }

  override def unregister(path: Path): Unit = {
    try {
      val it: Iterator[TypedPath] = FileTreeViews
        .list(path, pathWatcherDirectoryRegistry.maxDepthFor(path), new Filter[TypedPath]() {
          override def accept(typedPath: TypedPath): Boolean =
            typedPath.isSymbolicLink
        })
        .iterator()
      while (it.hasNext) symlinkWatcher.remove(it.next().getPath)
    } catch {
      case e: IOException => {}

    }
    pathWatcher.unregister(path)
  }

  override def close(): Unit = {
    pathWatcher.close()
    symlinkWatcher.close()
  }

  override def addObserver(observer: Observer[_ >: PathWatchers.Event]): Int =
    observers.addObserver(observer)

  override def removeObserver(handle: Int): Unit = {
    observers.removeObserver(handle)
  }

}
