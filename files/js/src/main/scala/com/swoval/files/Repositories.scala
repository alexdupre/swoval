// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.files.Directory.Converter
import com.swoval.functional.Filters
import java.io.IOException
import java.nio.file.Path

object Repositories {

  private val PATH_CONVERTER: Converter[Path] = new Converter[Path]() {
    override def apply(path: Path): Path = path
  }

  /**
   * Make a new recursive Directory with no cache value associated with the path.
   *
   * @param path the path to monitor
   * @return a directory whose entries just contain the path itself.
   */
  def of(path: Path): Directory[Path] = of(path, true)

  /**
   * Make a new Directory with no cache value associated with the path.
   *
   * @param path the path to monitor
   * @param depth sets how the limit for how deep to traverse the children of this directory
   * @return a directory whose entries just contain the path itself.
   */
  def of(path: Path, depth: Int): Directory[Path] =
    new Directory(path, path, PATH_CONVERTER, depth, Filters.AllPass).init()

  /**
   * Make a new Directory with no cache value associated with the path.
   *
   * @param path the path to monitor
   * @param recursive Toggles whether or not to cache the children of subdirectories
   * @return a directory whose entries just contain the path itself.
   */
  def of(path: Path, recursive: Boolean): Directory[Path] =
    new Directory(path,
                  path,
                  PATH_CONVERTER,
                  if (recursive) java.lang.Integer.MAX_VALUE else 0,
                  Filters.AllPass).init()

  /**
   * Make a new Directory with a cache entries created by {@code converter}.
   *
   * @param path the path to cache
   * @param converter a function to create the cache value for each path
   * @tparam T the cache value type
   * @return a directory with entries of type T.
   */
  def cached[T <: AnyRef](path: Path, converter: Converter[T]): Directory[T] =
    new Directory(path, path, converter, java.lang.Integer.MAX_VALUE, Filters.AllPass).init()

  /**
   * Make a new Directory with a cache entries created by {@code converter}.
   *
   * @param path the path to cache
   * @param converter a function to create the cache value for each path
   * @param recursive toggles whether or not to the children of subdirectories
   * @tparam T the cache value type
   * @return a directory with entries of type T.
   */
  def cached[T <: AnyRef](path: Path, converter: Converter[T], recursive: Boolean): Directory[T] =
    new Directory(path,
                  path,
                  converter,
                  if (recursive) java.lang.Integer.MAX_VALUE else 0,
                  Filters.AllPass).init()

  /**
   * Make a new Directory with a cache entries created by {@code converter}.
   *
   * @param path the path to cache
   * @param converter a function to create the cache value for each path
   * @param depth determines how many levels of children of subdirectories to include in the results
   * @tparam T the cache value type
   * @return a directory with entries of type T.
   */
  def cached[T <: AnyRef](path: Path, converter: Converter[T], depth: Int): Directory[T] =
    new Directory(path, path, converter, depth, Filters.AllPass).init()

}
