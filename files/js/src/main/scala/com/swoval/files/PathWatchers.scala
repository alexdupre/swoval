// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.runtime.Platform
import java.io.IOException
import java.nio.file.Path
import scala.beans.{ BeanProperty, BooleanBeanProperty }

object PathWatchers {

  /**
   * Create a PathWatcher for the runtime platform.
   *
   * @param followLinks toggles whether or not the targets of symbolic links should be monitored
   * @return PathWatcher for the runtime platform
   *     initialized
   */
  def get(followLinks: Boolean): PathWatcher[PathWatchers.Event] =
    get(followLinks, new DirectoryRegistryImpl())

  /**
   * Create a PathWatcher for the runtime platform.
   *
   * @param followLinks toggles whether or not the targets of symbolic links should be monitored
   * @param registry The registry of directories to monitor
   * @return PathWatcher for the runtime platform
   *     initialized
   */
  def get(followLinks: Boolean, registry: DirectoryRegistry): PathWatcher[Event] =
    if (Platform.isMac) ApplePathWatchers.get(followLinks, registry)
    else PlatformWatcher.make(followLinks, registry)

  /**
   * Create a PathWatcher for the runtime platform.
   *
   * @param registry The registry of directories to monitor
   * @return PathWatcher for the runtime platform
   */
  def get(followLinks: Boolean,
          service: RegisterableWatchService,
          registry: DirectoryRegistry): PathWatcher[Event] =
    PlatformWatcher.make(followLinks, service, registry)

  class Overflow(@BeanProperty val path: Path)

  object Event {

    object Kind {

      /**
 A new file was created.
       */
      val Create: Kind = new Kind("Create", 1)

      /**
 The file was deleted.
       */
      val Delete: Kind = new Kind("Delete", 2)

      /**
 An error occurred processing the event.
       */
      val Error: Kind = new Kind("Error", 4)

      /**
 An existing file was modified.
       */
      val Modify: Kind = new Kind("Modify", 3)

    }

    /**
     * An enum like class to indicate the type of file event. It isn't an actual enum because the
     * scala.js codegen has problems with enum types.
     */
    class Kind(private val name: String, private val priority: Int) {

      override def toString(): String = name

      override def equals(other: Any): Boolean = other match {
        case other: Kind => other.name == this.name
        case _           => false

      }

      override def hashCode(): Int = name.hashCode

    }

  }

  /**
 Container for [[PathWatcher]] events.
   */
  class Event(path: TypedPath, @BeanProperty val kind: Event.Kind) extends TypedPath {

    private val typedPath: TypedPath = path

    /**
     * Returns the path that triggered the event.
     *
     * @return the path that triggered the event.
     */
    def getPath(): Path = typedPath.getPath

    override def exists(): Boolean = typedPath.exists()

    override def isDirectory(): Boolean = typedPath.isDirectory

    override def isFile(): Boolean = typedPath.isFile

    override def isSymbolicLink(): Boolean = typedPath.isSymbolicLink

    override def toRealPath(): Path = typedPath.toRealPath()

    override def equals(other: Any): Boolean = other match {
      case other: Event => {
        val that: Event = other
        this.typedPath == that.typedPath && this.kind == that.kind
      }
      case _ => false

    }

    override def hashCode(): Int = typedPath.hashCode ^ kind.hashCode

    override def toString(): String =
      "Event(" + typedPath.getPath + ", " + kind + ")"

  }

}
