// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.files.DirectoryWatcher.Event.Create
import com.swoval.files.DirectoryWatcher.Event.Delete
import com.swoval.files.DirectoryWatcher.Event.Modify
import com.swoval.files.DirectoryWatcher.Event.Overflow
import com.swoval.files.apple.FileEvent
import com.swoval.files.apple.FileEventsApi
import com.swoval.files.apple.FileEventsApi.ClosedFileEventsApiException
import com.swoval.files.apple.Flags
import com.swoval.functional.Consumer
import com.swoval.functional.Either
import java.io.IOException
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.ArrayList
import java.util.HashMap
import java.util.Iterator
import java.util.List
import java.util.Map
import java.util.Map.Entry
import java.util.concurrent.Callable
import java.util.concurrent.atomic.AtomicBoolean
import AppleDirectoryWatcher._

object AppleDirectoryWatcher {

  private val DefaultOnStreamRemoved: DefaultOnStreamRemoved =
    new DefaultOnStreamRemoved()

  private class Stream(val id: Int)

  /**
 A no-op callback to invoke when streams are removed.
   */
  class DefaultOnStreamRemoved() extends Consumer[String] {

    override def accept(stream: String): Unit = {}

  }

}

/**
 * Implements the DirectoryWatcher for Mac OSX using the [[https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/UsingtheFSEventsFramework/UsingtheFSEventsFramework.html Apple File System Events Api]]
 */
class AppleDirectoryWatcher(private val latency: Double,
                            private val flags: Flags.Create,
                            private val callbackExecutor: Executor,
                            onFileEvent: Consumer[DirectoryWatcher.Event],
                            onStreamRemoved: Consumer[String],
                            executor: Executor)
    extends DirectoryWatcher {

  private val directoryRegistry: DirectoryRegistry = new DirectoryRegistry()

  private val streams: Map[Path, Stream] = new HashMap()

  private val closed: AtomicBoolean = new AtomicBoolean(false)

  private val internalExecutor: Executor =
    if (executor == null)
      Executor.make("com.swoval.files.AppleDirectoryWatcher-internal-internalExecutor")
    else executor

  private val fileEventsApi: FileEventsApi = FileEventsApi.apply(
    new Consumer[FileEvent]() {
      override def accept(fileEvent: FileEvent): Unit = {
        internalExecutor.run(new Runnable() {
          override def run(): Unit = {
            val fileName: String = fileEvent.fileName
            val path: Path = Paths.get(fileName)
            if (directoryRegistry.accept(path)) {
              var event: DirectoryWatcher.Event = null
              event =
                if (fileEvent.mustScanSubDirs())
                  new DirectoryWatcher.Event(path, Overflow)
                else if (fileEvent.itemIsFile())
                  if (fileEvent.isNewFile && Files.exists(path))
                    new DirectoryWatcher.Event(path, Create)
                  else if (fileEvent.isRemoved || !Files.exists(path))
                    new DirectoryWatcher.Event(path, Delete)
                  else new DirectoryWatcher.Event(path, Modify)
                else if (Files.exists(path))
                  new DirectoryWatcher.Event(path, Modify)
                else new DirectoryWatcher.Event(path, Delete)
              val callbackEvent: DirectoryWatcher.Event = event
              callbackExecutor.run(new Runnable() {
                override def run(): Unit = {
                  onFileEvent.accept(callbackEvent)
                }
              })
            }
          }
        })
      }
    },
    new Consumer[String]() {
      override def accept(stream: String): Unit = {
        internalExecutor.block(new Runnable() {
          override def run(): Unit = {
            new Runnable() {
              override def run(): Unit = {
                streams.remove(Paths.get(stream))
              }
            }.run()
          }
        })
        callbackExecutor.run(new Runnable() {
          override def run(): Unit = {
            onStreamRemoved.accept(stream)
          }
        })
      }
    }
  )

  /**
   * Registers a path
   *
   * @param path The directory to watch for file events
   * @param maxDepth The maximum number of subdirectory levels to visit
   * @return an [[com.swoval.functional.Either]] containing the result of the registration or an
   *     IOException if registration fails. This method should be idempotent and return true the
   *     first time the directory is registered or when the depth is changed. Otherwise it should
   *     return false.
   */
  override def register(path: Path, maxDepth: Int): Either[IOException, Boolean] =
    register(path, flags, maxDepth)

  /**
   * Registers with additional flags
   *
   * @param path The directory to watch for file events
   * @param flags The flags [[com.swoval.files.apple.Flags.Create]] to set for the directory
   * @param maxDepth The maximum number of subdirectory levels to visit
   * @return an [[com.swoval.functional.Either]] containing the result of the registration or an
   *     IOException if registration fails. This method should be idempotent and return true the
   *     first time the directory is registered or when the depth is changed. Otherwise it should
   *     return false.
   */
  def register(path: Path, flags: Flags.Create, maxDepth: Int): Either[IOException, Boolean] = {
    val either: Either[Exception, Boolean] =
      internalExecutor.block(new Callable[Boolean]() {
        override def call(): Boolean =
          registerImpl(path, flags, maxDepth)
      })
    if (either.isLeft &&
        !(either.left().getValue.isInstanceOf[IOException])) {
      throw new RuntimeException(either.left().getValue)
    }
    either.castLeft(classOf[IOException])
  }

  private def registerImpl(path: Path, flags: Flags.Create, maxDepth: Int): Boolean = {
    var result: Boolean = true
    var realPath: Path = path
    try realPath = path.toRealPath()
    catch {
      case e: IOException => {}

    }
    val entry: Entry[Path, Stream] = find(realPath)
    directoryRegistry.addDirectory(path, maxDepth)
    if (entry == null) {
      try {
        val id: Int = fileEventsApi.createStream(realPath.toString, latency, flags.getValue)
        if (id == -1) {
          result = false
          System.err.println("Error watching " + realPath + ".")
        } else {
          removeRedundantStreams(realPath)
          streams.put(realPath, new Stream(id))
        }
      } catch {
        case e: ClosedFileEventsApiException => {
          close()
          result = false
        }

      }
    }
    result
  }

  private def removeRedundantStreams(path: Path): Unit = {
    val toRemove: List[Path] = new ArrayList[Path]()
    val it: Iterator[Entry[Path, Stream]] = streams.entrySet().iterator()
    while (it.hasNext) {
      val e: Entry[Path, Stream] = it.next()
      val key: Path = e.getKey
      if (key.startsWith(path) && key != path) {
        toRemove.add(key)
      }
    }
    val pathIterator: Iterator[Path] = toRemove.iterator()
    while (pathIterator.hasNext) unregisterImpl(pathIterator.next())
  }

  private def unregisterImpl(path: Path): Unit = {
    if (!closed.get) {
      directoryRegistry.removeDirectory(path)
      val stream: Stream = streams.remove(path)
      if (stream != null && stream.id != -1) {
        fileEventsApi.stopStream(stream.id)
      }
    }
  }

  /**
   * Unregisters a path
   *
   * @param path The directory to remove from monitoring
   */
  override def unregister(path: Path): Unit = {
    internalExecutor.block(new Runnable() {
      override def run(): Unit = {
        unregisterImpl(path)
      }
    })
  }

  /**
 Closes the FileEventsApi and shuts down the {@code callbackExecutor}.
   */
  override def close(): Unit = {
    if (closed.compareAndSet(false, true)) {
      super.close()
      internalExecutor.block(new Runnable() {
        override def run(): Unit = {
          streams.clear()
          fileEventsApi.close()
          callbackExecutor.close()
        }
      })
      internalExecutor.close()
    }
  }

  /**
   * Creates a new AppleDirectoryWatcher which is a wrapper around [[FileEventsApi]], which in
   * turn is a native wrapper around [[https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1
   * Apple File System Events]]
   *
   * @param latency specified in fractional seconds
   * @param flags Native flags
   * @param onFileEvent [[com.swoval.functional.Consumer]] to run on file events
   *     initialization
   */
  def this(latency: Double, flags: Flags.Create, onFileEvent: Consumer[DirectoryWatcher.Event]) =
    this(latency,
         flags,
         Executor.make("com.swoval.files.AppleDirectoryWatcher.executorThread"),
         onFileEvent,
         DefaultOnStreamRemoved,
         null)

  /**
   * Creates a new AppleDirectoryWatcher which is a wrapper around [[FileEventsApi]], which in
   * turn is a native wrapper around [[https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1
   * Apple File System Events]]
   *
   * @param latency specified in fractional seconds
   * @param flags Native flags
   * @param callbackExecutor Executor to run callbacks on
   * @param onFileEvent [[com.swoval.functional.Consumer]] to run on file events
   *     initialization
   */
  def this(latency: Double,
           flags: Flags.Create,
           callbackExecutor: Executor,
           onFileEvent: Consumer[DirectoryWatcher.Event]) =
    this(latency, flags, callbackExecutor, onFileEvent, DefaultOnStreamRemoved, null)

  /**
   * Creates a new AppleDirectoryWatcher which is a wrapper around [[FileEventsApi]], which in
   * turn is a native wrapper around [[https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1
   * Apple File System Events]]
   *
   * @param latency specified in fractional seconds
   * @param flags Native flags
   * @param onFileEvent [[com.swoval.functional.Consumer]] to run on file events
   * @param internalExecutor The internal executor to manage the directory watcher state
   *     initialization
   */
  def this(latency: Double,
           flags: Flags.Create,
           onFileEvent: Consumer[DirectoryWatcher.Event],
           internalExecutor: Executor) =
    this(latency,
         flags,
         Executor.make("com.swoval.files.AppleDirectoryWatcher.executorThread"),
         onFileEvent,
         DefaultOnStreamRemoved,
         internalExecutor)

  private def find(path: Path): Entry[Path, Stream] = {
    val it: Iterator[Entry[Path, Stream]] = streams.entrySet().iterator()
    var result: Entry[Path, Stream] = null
    while (result == null && it.hasNext) {
      val entry: Entry[Path, Stream] = it.next()
      if (path.startsWith(entry.getKey)) {
        result = entry
      }
    }
    result
  }

}
