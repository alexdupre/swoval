// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.functional.Either
import com.swoval.functional.Filters
import java.io.IOException
import java.nio.file.Path

object FileTreeDataViews {

  /**
   * Make a new CachedDirectory with a cache entries created by {@code converter}.
   *
   * @param path the path to cache
   * @param converter a function to create the cache value for each path
   * @param depth determines how many levels of children of subdirectories to include in the results
   * @param followLinks sets whether or not to treat symbolic links whose targets as directories or
   *     files
   * @tparam T the cache value type
   * @return a directory with entries of type T.
   */
  def cachedUpdatable[T <: AnyRef](path: Path,
                                   converter: Converter[T],
                                   depth: Int,
                                   followLinks: Boolean): CachedDirectory[T] =
    new CachedDirectoryImpl(path,
                            path,
                            converter,
                            depth,
                            Filters.AllPass,
                            FileTreeViews.getDefault(followLinks)).init()

  /**
   * Make a new [[DirectoryView]] that caches the file tree but has no data value associated
   * with each value.
   *
   * @param path the path to monitor
   * @param depth sets how the limit for how deep to traverse the children of this directory
   * @param followLinks sets whether or not to treat symbolic links whose targets as directories or
   *     files
   * @return a directory whose entries just contain the path itself.
   */
  def cached[T <: AnyRef](path: Path,
                          converter: Converter[T],
                          depth: Int,
                          followLinks: Boolean): DirectoryDataView[T] =
    cachedUpdatable(path, converter, depth, followLinks)

  /**
   * Container class for [[CachedDirectoryImpl]] entries. Contains both the path to which the
   * path corresponds along with a data value.
   *
   * @tparam T The value wrapped in the Entry
   */
  trait Entry[T] extends TypedPath with Comparable[Entry[T]] {

    /**
     * Return the value associated with this entry. jjj
     *
     * @return the value associated with this entry.
     */
    def getValue(): Either[IOException, T]

  }

  /**
   * Converts a Path into an arbitrary value to be cached.
   *
   * @tparam R the generic type generated from the path.
   */
  trait Converter[R] {

    /**
     * Convert the path to a value.
     *
     * @param path the path to convert
     * @return the converted value
     */
    def apply(path: TypedPath): R

  }

}
